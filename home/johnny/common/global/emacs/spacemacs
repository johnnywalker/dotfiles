;; -*- mode: emacs-lisp; lexical-binding: t -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs

   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused

   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t

   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. "~/.mycontribs/")
   dotspacemacs-configuration-layer-path '()

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press `SPC f e R' (Vim style) or
     ;; `M-m f e R' (Emacs style) to install them.
     ;; ----------------------------------------------------------------
    ;; load first to avoid Org version mismatch warnings
    (org :variables
        org-enable-github-support t
        org-enable-verb-support t)
     ansible
     (auto-completion :variables
                      auto-completion-use-company-box t
                      ;; disable TAB completion (prioritize copilot)
                      auto-completion-tab-key-behavior nil
                      ;; disable auto-completion popup
                      auto-completion-idle-delay nil
                      ;; recommended for lsp mode
                      auto-completion-minimum-prefix-length 1)
     ;; better-defaults
     compleseus
     dhall
     ;; eaf seems to be broken
     ;; eaf
     ;; emacs-lisp
     (git :variables
          git-magit-status-fullscreen t
          magit-diff-refine-hunk t
          magit-wip-mode t
          ;; avoid auto-save - becomes very disruptive with magit-wip-mode
          magit-save-repository-buffers nil
          git-enable-magit-todos-plugin t)
     go
     graphql
     haskell
     ;; helm
     (html :variables
           web-fmt-tool 'web-beautify)
     ;; ivy
     java
     (javascript :variables
                 javascript-fmt-tool 'prettier
                 ;; disabled to troubleshoot lsp-signature-mode
                 ;; https://github.com/emacs-lsp/lsp-mode/issues/2767
                 ;; seems to interfere with :typescript-fmt-on-save
                 javascript-fmt-on-save t)
     kotlin
     (lsp :variables
          ;; disable documentation instead of rendering in eldoc
          ;; lsp-signature-render-documentation nil
          ;; trying to avoid a bug where lsp signature inserts the contents of the
          ;; docstring in the current buffer instead of the minibuffer
          lsp-signature-function 'lsp-signature-posframe
          ;; lsp-signature-auto-activate '(:on-server-request)
          lsp-signature-auto-activate nil
          ;; disable doc popups
          lsp-ui-doc-enable nil)
     markdown
     multiple-cursors
     python
     react
     rust
     scala
     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom
            shell-default-shell 'multi-vterm)
     (spacemacs-layouts :variables
                        layouts-enable-autosave t
                        persp-autokill-buffer-on-remove 'kill-weak)
     spell-checking
     sql
     syntax-checking
     (terraform :variables
                terraform-auto-format-on-save nil
                terraform-backend 'lsp)
     treemacs
     (typescript :variables
                 typescript-fmt-on-save t
                 typescript-fmt-tool 'prettier
                 typescript-linter 'eslint)
     (version-control :variables
                      version-control-diff-tool 'diff-hl
                      version-control-global-margin t)
     yaml)


   ;; List of additional packages that will be installed without being wrapped
   ;; in a layer (generally the packages are installed only and should still be
   ;; loaded using load/require/use-package in the user-config section below in
   ;; this file). If you need some configuration for these packages, then
   ;; consider creating a layer. You can also put the configuration in
   ;; `dotspacemacs/user-config'. To use a local version of a package, use the
   ;; `:location' property: '(your-package :location "~/path/to/your-package/")
   ;; Also include the dependencies as they will not be resolved automatically.
   dotspacemacs-additional-packages
   '(
     nix-mode
     ;; emacs keeps reinstalling this package after saying it's an orphan
     bui
     ;; emacs keeps reinstalling this package after saying it's an orphan
     dap-mode
     ;; emacs keeps reinstalling this package after saying it's an orphan
     lsp-docker
     direnv
     editorconfig
     just-mode
     (copilot :location (recipe
                         :fetcher github
                         :repo "copilot-emacs/copilot.el"
                         ;; workaround copilot-login bug introduced in https://github.com/copilot-emacs/copilot.el/pull/392
                         ;; - should be resolved now
                         ;; :commit "a03a4373886e5ee183cc33f90ebf669e0ce163e4"
                         :files ("*.el" "dist")))
     (hurl-mode :location (recipe
                            :fetcher github
                            :repo "jaszhe/hurl-mode"
                            :files ("*.el")))
     (lsp-vtsls :location (recipe
                           :fetcher github
                           :repo "sdvcrx/lsp-vtsls"))
     ox-pandoc
     nickel-mode)

   ;; A list of packages that cannot be updated.
    dotspacemacs-frozen-packages
    '(
       ;; managed by nix
       vterm-module)

   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '()

   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and deletes any unused
   ;; packages as well as their unused dependencies. `used-but-keep-unused'
   ;; installs only the used packages but won't delete unused ones. `all'
   ;; installs *all* packages supported by Spacemacs and never uninstalls them.
   ;; (default is `used-only')
   dotspacemacs-install-packages 'used-but-keep-unused))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non-nil then enable support for the portable dumper. You'll need to
   ;; compile Emacs 27 from source following the instructions in file
   ;; EXPERIMENTAL.org at to root of the git repository.
   ;;
   ;; WARNING: pdumper does not work with Native Compilation, so it's disabled
   ;; regardless of the following setting when native compilation is in effect.
   ;;
   ;; (default nil)
   dotspacemacs-enable-emacs-pdumper nil

   ;; Name of executable file pointing to emacs 27+. This executable must be
   ;; in your PATH.
   ;; (default "emacs")
   dotspacemacs-emacs-pdumper-executable-file "emacs"

   ;; Name of the Spacemacs dump file. This is the file will be created by the
   ;; portable dumper in the cache directory under dumps sub-directory.
   ;; To load it when starting Emacs add the parameter `--dump-file'
   ;; when invoking Emacs 27.1 executable on the command line, for instance:
   ;;   ./emacs --dump-file=$HOME/.emacs.d/.cache/dumps/spacemacs-27.1.pdmp
   ;; (default (format "spacemacs-%s.pdmp" emacs-version))
   dotspacemacs-emacs-dumper-dump-file (format "spacemacs-%s.pdmp" emacs-version)

   ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t

   ;; Maximum allowed time in seconds to contact an ELPA repository.
   ;; (default 5)
   dotspacemacs-elpa-timeout 5

   ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
   ;; This is an advanced option and should not be changed unless you suspect
   ;; performance issues due to garbage collection operations.
   ;; (default '(100000000 0.1))
   dotspacemacs-gc-cons '(100000000 0.1)

   ;; Set `read-process-output-max' when startup finishes.
   ;; This defines how much data is read from a foreign process.
   ;; Setting this >= 1 MB should increase performance for lsp servers
   ;; in emacs 27.
   ;; (default (* 1024 1024))
   dotspacemacs-read-process-output-max (* 1024 1024)

   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the
   ;; latest version of packages from MELPA. Spacelpa is currently in
   ;; experimental state please use only for testing purposes.
   ;; (default nil)
   dotspacemacs-use-spacelpa nil

   ;; If non-nil then verify the signature for downloaded Spacelpa archives.
   ;; (default t)
   dotspacemacs-verify-spacelpa-archives t

   ;; If non-nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil

   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'. (default 'emacs-version)
   dotspacemacs-elpa-subdirectory 'emacs-version

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim

   ;; If non-nil show the version string in the Spacemacs buffer. It will
   ;; appear as (spacemacs version)@(emacs version)
   ;; (default t)
   dotspacemacs-startup-buffer-show-version t

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official

   ;; Scale factor controls the scaling (size) of the startup banner. Default
   ;; value is `auto' for scaling the logo automatically to fit all buffer
   ;; contents, to a maximum of the full image height and a minimum of 3 line
   ;; heights. If set to a number (int or float) it is used as a constant
   ;; scaling factor for the default logo size.
   dotspacemacs-startup-banner-scale 'auto

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `recents-by-project' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   ;; The exceptional case is `recents-by-project', where list-type must be a
   ;; pair of numbers, e.g. `(recents-by-project . (7 .  5))', where the first
   ;; number is the project limit and the second the limit on the recent files
   ;; within a project.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))

   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive t

   ;; Show numbers before the startup list lines. (default t)
   dotspacemacs-show-startup-list-numbers t

   ;; The minimum delay in seconds between number key presses. (default 0.4)
   dotspacemacs-startup-buffer-multi-digit-delay 0.4

   ;; If non-nil, show file icons for entries and headings on Spacemacs home buffer.
   ;; This has no effect in terminal or if "all-the-icons" package or the font
   ;; is not installed. (default nil)
   dotspacemacs-startup-buffer-show-icons nil

   ;; Default major mode for a new empty buffer. Possible values are mode
   ;; names such as `text-mode'; and `nil' to use Fundamental mode.
   ;; (default `text-mode')
   dotspacemacs-new-empty-buffer-major-mode 'text-mode

   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode

   ;; If non-nil, *scratch* buffer will be persistent. Things you write down in
   ;; *scratch* buffer will be saved and restored automatically.
   dotspacemacs-scratch-buffer-persistent nil

   ;; If non-nil, `kill-buffer' on *scratch* buffer
   ;; will bury it instead of killing.
   dotspacemacs-scratch-buffer-unkillable nil

   ;; Initial message in the scratch buffer, such as "Welcome to Spacemacs!"
   ;; (default nil)
   dotspacemacs-initial-scratch-message nil

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press `SPC T n' to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light). A theme from external
   ;; package can be defined with `:package', or a theme can be defined with
   ;; `:location' to download the theme package, refer the themes section in
   ;; DOCUMENTATION.org for the full theme specifications.
   dotspacemacs-themes '(spacemacs-dark
                         spacemacs-light)

   ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
   ;; `all-the-icons', `custom', `doom', `vim-powerline' and `vanilla'. The
   ;; first three are spaceline themes. `doom' is the doom-emacs mode-line.
   ;; `vanilla' is default Emacs mode-line. `custom' is a user defined themes,
   ;; refer to the DOCUMENTATION.org for more info on how to create your own
   ;; spaceline theme. Value can be a symbol or list with additional properties.
   ;; (default '(spacemacs :separator wave :separator-scale 1.5))
   dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5)

   ;; If non-nil the cursor color matches the state color in GUI Emacs.
   ;; (default t)
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font or prioritized list of fonts. This setting has no effect when
   ;; running Emacs in terminal. The font set here will be used for default and
   ;; fixed-pitch faces. The `:size' can be specified as
   ;; a non-negative integer (pixel size), or a floating-point (point size).
   ;; Point size is recommended, because it's device independent. (default 10.0)
   ;; dotspacemacs-default-font '("Source Code Pro"
   ;;                             :size 13.0
   ;;                             :weight normal
   ;;                             :width normal)
   dotspacemacs-default-font '(;; "JetBrains Mono"
                                "JetBrainsMono Nerd Font"
                               :size @dotspacemacs_font_size@
                               :weight normal
                               :width normal)

   ;; The leader key (default "SPC")
   dotspacemacs-leader-key "SPC"

   ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"

   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","

   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m" for terminal mode, "<M-return>" for GUI mode).
   ;; Thus M-RET should work as leader key in both GUI and terminal modes.
   ;; C-M-m also should work in terminal mode, but not in GUI mode.
   dotspacemacs-major-mode-emacs-leader-key (if window-system "<M-return>" "C-M-m")

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil

   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"

   ;; If non-nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil

   ;; If non-nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts t

   ;; If non-nil, auto-generate layout name when creating new layouts. Only has
   ;; effect when using the "jump to layout by number" commands. (default nil)
   dotspacemacs-auto-generate-layout-names nil

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5

   ;; If non-nil, the paste transient-state is enabled. While enabled, after you
   ;; paste something, pressing `C-j' and `C-k' several times cycles through the
   ;; elements in the `kill-ring'. (default nil)
   dotspacemacs-enable-paste-transient-state nil

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; It is also possible to use a posframe with the following cons cell
   ;; `(posframe . position)' where position can be one of `center',
   ;; `top-center', `bottom-center', `top-left-corner', `top-right-corner',
   ;; `top-right-corner', `bottom-left-corner' or `bottom-right-corner'
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom

   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose nil

   ;; Whether side windows (such as those created by treemacs or neotree)
   ;; are kept or minimized by `spacemacs/toggle-maximize-window' (SPC w m).
   ;; (default t)
   dotspacemacs-maximize-window-keep-side-windows t

   ;; If nil, no load-hints enabled. If t, enable the `load-hints' which will
   ;; put the most likely path on the top of `load-path' to reduce walking
   ;; through the whole `load-path'. It's an experimental feature to speedup
   ;; Spacemacs on Windows. Refer the FAQ.org "load-hints" session for details.
   dotspacemacs-enable-load-hints nil

   ;; If t, enable the `package-quickstart' feature to avoid full package
   ;; loading, otherwise no `package-quickstart' attemption (default nil).
   ;; Refer the FAQ.org "package-quickstart" section for details.
   dotspacemacs-enable-package-quickstart nil

   ;; If non-nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t

   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil

   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non-nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default t) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup t

   ;; If non-nil the frame is undecorated when Emacs starts up. Combine this
   ;; variable with `dotspacemacs-maximized-at-startup' to obtain fullscreen
   ;; without external boxes. Also disables the internal border. (default nil)
   dotspacemacs-undecorated-at-startup nil

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90

   ;; A value from the range (0..100), in increasing opacity, which describes the
   ;; transparency level of a frame background when it's active or selected. Transparency
   ;; can be toggled through `toggle-background-transparency'. (default 90)
   dotspacemacs-background-transparency 90

   ;; If non-nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t

   ;; If non-nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t

   ;; If non-nil unicode symbols are displayed in the mode line.
   ;; If you use Emacs as a daemon and wants unicode characters only in GUI set
   ;; the value to quoted `display-graphic-p'. (default t)
   dotspacemacs-mode-line-unicode-symbols t

   ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t

   ;; Show the scroll bar while scrolling. The auto hide time can be configured
   ;; by setting this variable to a number. (default t)
   dotspacemacs-scroll-bar-while-scrolling nil

   ;; Control line numbers activation.
   ;; If set to `t', `relative' or `visual' then line numbers are enabled in all
   ;; `prog-mode' and `text-mode' derivatives. If set to `relative', line
   ;; numbers are relative. If set to `visual', line numbers are also relative,
   ;; but only visual lines are counted. For example, folded lines will not be
   ;; counted and wrapped lines are counted as multiple lines.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :visual nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; When used in a plist, `visual' takes precedence over `relative'.
   ;; (default nil)
   dotspacemacs-line-numbers nil

   ;; Code folding method. Possible values are `evil', `origami' and `vimish'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil

   ;; If non-nil and `dotspacemacs-activate-smartparens-mode' is also non-nil,
   ;; `smartparens-strict-mode' will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil

   ;; If non-nil smartparens-mode will be enabled in programming modes.
   ;; (default t)
   dotspacemacs-activate-smartparens-mode t

   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc...
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil

   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all

   ;; If non-nil, start an Emacs server if one is not already running.
   ;; (default nil)
   dotspacemacs-enable-server @dotspacemacs_enable_server@

   ;; Set the emacs server socket location.
   ;; If nil, uses whatever the Emacs default is, otherwise a directory path
   ;; like \"~/.emacs.d/server\". It has no effect if
   ;; `dotspacemacs-enable-server' is nil.
   ;; (default nil)
   dotspacemacs-server-socket-dir nil

   ;; If non-nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server @dotspacemacs_persistent_server@

   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
   ;; (default '("rg" "ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")

   ;; The backend used for undo/redo functionality. Possible values are
   ;; `undo-fu', `undo-redo' and `undo-tree' see also `evil-undo-system'.
   ;; Note that saved undo history does not get transferred when changing
   ;; your undo system. The default is currently `undo-fu' as `undo-tree'
   ;; is not maintained anymore and `undo-redo' is very basic."
   dotspacemacs-undo-system 'undo-fu

   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; If nil then Spacemacs uses default `frame-title-format' to avoid
   ;; performance issues, instead of calculating the frame title by
   ;; `spacemacs/title-prepare' all the time.
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format "%t | %a | Emacs"

   ;; Format specification for setting the icon title format
   ;; (default nil - same as frame-title-format)
   dotspacemacs-icon-title-format nil

   ;; Color highlight trailing whitespace in all prog-mode and text-mode derived
   ;; modes such as c++-mode, python-mode, emacs-lisp, html-mode, rst-mode etc.
   ;; (default t)
   dotspacemacs-show-trailing-whitespace t

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; The variable `global-spacemacs-whitespace-cleanup-modes' controls
   ;; which major modes have whitespace cleanup enabled or disabled
   ;; by default.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil

   ;; If non-nil activate `clean-aindent-mode' which tries to correct
   ;; virtual indentation of simple modes. This can interfere with mode specific
   ;; indent handling like has been reported for `go-mode'.
   ;; If it does deactivate it here.
   ;; (default t)
   dotspacemacs-use-clean-aindent-mode t

   ;; Accept SPC as y for prompts if non-nil. (default nil)
   dotspacemacs-use-SPC-as-y nil

   ;; If non-nil shift your number row to match the entered keyboard layout
   ;; (only in insert state). Currently supported keyboard layouts are:
   ;; `qwerty-us', `qwertz-de' and `querty-ca-fr'.
   ;; New layouts can be added in `spacemacs-editing' layer.
   ;; (default nil)
   dotspacemacs-swap-number-row nil

   ;; Either nil or a number of seconds. If non-nil zone out after the specified
   ;; number of seconds. (default nil)
   dotspacemacs-zone-out-when-idle nil

   ;; Run `spacemacs/prettify-org-buffer' when
   ;; visiting README.org files of Spacemacs.
   ;; (default nil)
   dotspacemacs-pretty-docs nil

   ;; If nil the home buffer shows the full path of agenda items
   ;; and todos. If non-nil only the file name is shown.
   dotspacemacs-home-shorten-agenda-source nil

   ;; If non-nil then byte-compile some of Spacemacs files.
   dotspacemacs-byte-compile nil))

(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env)
)

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  ;; fix error listing directories on macOS
  ;; https://github.com/d12frosted/homebrew-emacs-plus/issues/383
  (when (eq system-type 'darwin)
    (setq insert-directory-program "gls"))

  ;; https://gist.github.com/railwaycat/3498096
  ;; https://github.com/d12frosted/homebrew-emacs-plus/issues/178
  (when (and (eq system-type 'darwin) (display-graphic-p))
    ;; (setq mac-option-modifier '(:ordinary meta :function alt :mouse alt))
    (setq mac-option-modifier '(:ordinary meta :function meta :mouse alt))
    (setq mac-command-modifier 'super)
    (global-set-key [(super x)] 'kill-region)
    (global-set-key [(super c)] 'kill-ring-save)
    (global-set-key [(super v)] 'yank))

  ;; increase max-lisp-eval-depth to resolve "lisp nesting exceeds max-lisp-eval-depth" error
  (setq max-lisp-eval-depth 10000)

  ;; write custom settings to a separate file
  (setq custom-file "~/.emacs.d/private/custom-settings.el")
  (load custom-file)
)


(defun dotspacemacs/user-load ()
  "Library to load while dumping.
This function is called only while dumping Spacemacs configuration. You can
`require' or `load' the libraries of your choice that will be included in the
dump."
)


(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."

  ;; nix
  (use-package nix-mode
    :mode "\\.nix\\'")

  ;; stop me from accidentally closing emacs
  (global-unset-key (kbd "s-w"))

  (with-eval-after-load 'lsp-mode
    ;; ignore .cache directories
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.cache$")
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.nx$")
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.vercel$"))

  ;; begin: lsp config for nix
  (use-package lsp-mode
      :ensure t
      :init
      ;; reposition the lsp-signature posframe to bottom left
      (setq lsp-signature-posframe-params (list :poshandler 'posframe-poshandler-window-bottom-left-corner :height 10 :width 120 :border-width 1 :min-width 60))
      :hook (
              ;; support tree-sitter modes
              (tsx-ts-mode typescript-ts-mode js-ts-mode) . lsp-deferred))

  (use-package lsp-nix
    :ensure lsp-mode
    :after (lsp-mode)
    :demand t
    :custom
    (lsp-nix-nil-formatter ["alejandra"]))

  (use-package nix-mode
    :hook (nix-mode . lsp-deferred)
    :ensure t)

  ;; Set up before-save hooks to format buffer.
  (defun lsp-nix-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t))
  (add-hook 'nix-mode-hook #'lsp-nix-install-save-hooks)
  ;; end: lsp config for nix

  (use-package direnv
    :config
    (direnv-mode))

  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))

  ;; language server that wraps VSCode server for TS
  (use-package lsp-vtsls
    :after lsp-mode
    :config
    (setq
      ;; show all LSP doc on minibuffer (probably want to disable)
      lsp-eldoc-render-all t
      ;; https://github.com/yioneko/vtsls#bad-performance-of-completion
      lsp-vtsls-server-side-fuzzy-match t
      lsp-vtsls-entries-limit 1000))

  (load "~/.emacs.d/private/nickel-mode.el")

  ;; begin: copilot

  ;; accept completion from copilot and fallback to company
  (with-eval-after-load 'company
    ;; disable inline previews
    (delq 'company-preview-if-just-one-frontend company-frontends))

  ;; unset the binding to `delete-horizontal-space'
  (global-unset-key (kbd "M-\\"))

  ;; disable TAB completion with company
  ;; (with-eval-after-load 'company
  ;;   (define-key company-active-map [tab] nil))

  ;; increase from 100000
  (setq copilot-max-char 1000000)

  (with-eval-after-load 'copilot
    ;; define backup for when copilot-completion-map isn't activating (not sure why, but it happens in TF)
    (define-key copilot-mode-map (kbd "<f8>") 'copilot-accept-completion)
    (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
    (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
    (define-key copilot-completion-map (kbd "C-TAB") 'copilot-accept-completion-by-word)
    (define-key copilot-completion-map (kbd "C-<tab>") 'copilot-accept-completion-by-word)
    (define-key copilot-completion-map (kbd "C-M-TAB") 'copilot-accept-completion-by-line)
    (define-key copilot-completion-map (kbd "C-M-<tab>") 'copilot-accept-completion-by-line)
    ;; use M-} instead of M-[ to avoid conflict with xterm focus in/out bindings
    (define-key copilot-mode-map (kbd "M-}") 'copilot-previous-completion)
    (define-key copilot-mode-map (kbd "M-]") 'copilot-next-completion)
    (define-key copilot-mode-map (kbd "M-\\") 'copilot-complete)

    (load "~/.emacs.d/private/copilot-electric-indent-workaround.el"))
  ;; end: copilot

  (add-hook 'prog-mode-hook 'copilot-mode)
  ;; (add-hook 'js-mode-hook 'copilot-mode)
  (add-hook 'org-mode-hook 'copilot-mode)
  ;; (add-hook 'typescript-mode-hook 'copilot-mode)
  ;; (add-hook 'text-mode-hook 'copilot-mode)
  ;; (add-hook 'gfm-mode #'copilot-mode)
  (add-hook 'markdown-mode-hook #'copilot-mode)
  (add-hook 'yaml-mode-hook #'copilot-mode)

  ;; lsp-booster does not work with metals treeview and doctor
  (load "~/.emacs.d/private/emacs-lsp-booster.el")

  ;; ;; disable company in all prog-mode based modes
  ;; (add-hook 'prog-mode-hook 'company-mode)
  ;; ;; disable company in python-mode
  ;; (add-hook 'python-mode-hook (lambda() (company-mode 0)))

  ;; shortcut for comment/uncomment lines
  (global-set-key (kbd "s-/") 'spacemacs/comment-or-uncomment-lines)

  ;; terraform config
  ;; use terraform-ls (official language server)
  (add-to-list 'lsp-disabled-clients 'tfls)
  ;; (setq lsp-terraform-ls-enable-show-reference t)
  ;; (setq lsp-semantic-tokens-enable t)
  ;; (setq lsp-semantic-tokens-honor-refresh-requests t)

  ;; associate .graphqls extension with graphql-mode
  (add-to-list 'auto-mode-alist '("\\.graphqls\\'" . graphql-mode))

  ;; associate .cts and .mts extensions with typescript-mode
  (add-to-list 'auto-mode-alist '("\\.[cm]ts\\'" . typescript-mode))


  ;; try configuring flycheck to use lsp + eslint
  ;; - eslint server for lsp has awful delay when opening new file
  ;(flycheck-add-next-checker 'lsp 'javascript-eslint)
  (add-hook 'lsp-after-initialize-hook
            (lambda () (flycheck-add-next-checker 'lsp 'javascript-eslint)))
  (setq flycheck-javascript-eslint-executable "eslint_d")

  ;; use eslint_d instead of eslint
  (setq flycheck-javascript-eslint-executable "eslint_d")

  ;; enable ox-pandoc automatically
  (eval-after-load "org"
    '(require 'ox-pandoc nil t))

  ;; add missing entries for copilot--infer-indentation-offset

  ;; `C-g' to close doc
  ;; https://github.com/emacs-lsp/lsp-ui/issues/442
  (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide)

  ;; ruff is still unstable - requires --preview flag
  (setq lsp-ruff-ruff-args '("--preview"))
)

;; TODO no longer used - extract custom settings defaults to separate file
;; - e.g. custom-settings-defaults.el
;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
  (custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(copilot-indent-offset-warning-disable t)
 '(css-indent-offset 2)
 '(fill-column 100)
 '(json-reformat:indent-width 2)
 '(lisp-indent-offset 2)
 '(lsp-auto-execute-action nil)
 '(lsp-clients-typescript-preferences '(:importModuleSpecifierPreference "project-relative"))
 '(lsp-clients-typescript-server-args '("--stdio"))
 '(lsp-idle-delay 1)
 '(lsp-metals-fallback-scala-version "3.3.4")
 '(lsp-typescript-tsserver-log "verbose")
 ;; disable branch scanner - causes performance issues in large repos
 '(magit-todos-branch-list nil)
 '(magit-todos-insert-after '(bottom) nil nil "Changed by setter of obsolete option `magit-todos-insert-at'")
 '(mouse-wheel-flip-direction t)
 '(org-agenda-files '("~/org/notes.org"))
 '(org-export-backends '(ascii html icalendar latex md odt org))
 '(package-selected-packages
    '(php-mode blacken code-cells company-anaconda anaconda-mode cython-mode helm-cscope helm-pydoc importmagic epc ctable concurrent deferred live-py-mode lsp-pyright lsp-python-ms nose pip-requirements pipenv load-env-vars pippel poetry py-isort pydoc pyenv-mode pythonic pylookup pytest pyvenv sphinx-doc stickyfunc-enhance xcscope yapfify ansible ansible-doc company-ansible jinja2-mode ox-pandoc ox-gfm sqlup-mode rjsx-mode company-web web-completion-data graphql-mode helm-css-scss pug-mode sass-mode haml-mode scss-mode slim-mode tagedit emmet-mode typescript-mode web-mode browse-at-remote diff-hl evil-org gnuplot helm-org-rifle magit-todos org-cliplink org-contrib org-download org-mime org-pomodoro alert log4e gntp org-present org-projectile org-project-capture org-category-capture org-rich-yank orgit-forge orgit company-box frame-local helm wfnames helm-core compleseus-spacemacs-help consult-lsp consult-yasnippet embark-consult consult embark flyspell-correct-popup marginalia orderless vertico wgrep rustic flycheck-kotlin groovy-imports pcache groovy-mode kotlin-mode lsp-java maven-test-mode mvn json-mode json-navigator hierarchy json-reformat json-snatcher add-node-modules-path impatient-mode htmlize import-js grizzl js-doc js2-refactor multiple-cursors livid-mode nodejs-repl npm-mode prettier-js skewer-mode js2-mode simple-httpd tern web-beautify neotree company-go flycheck-golangci-lint go-eldoc go-fill-struct go-gen-test go-guru go-impl go-rename go-tag go-mode godoctor company-terraform terraform-mode hcl-mode copilot esh-help eshell-prompt-extras eshell-z multi-term multi-vterm shell-pop terminal-here vterm xterm-color just-mode yaml-mode direnv nix-mode ac-ispell attrap auto-complete auto-dictionary auto-yasnippet cmm-mode company-cabal dante lcr eldoc xref flycheck-haskell flycheck-pos-tip flyspell-correct-helm flyspell-correct fuzzy gh-md haskell-snippets helm-c-yasnippet helm-company helm-hoogle helm-lsp hindent hlint-refactor lsp-haskell haskell-mode lsp-origami origami lsp-ui markdown-toc mmm-mode yasnippet-snippets yasnippet forge ghub closql emacsql compat treepy git-link git-messenger git-modes git-timemachine gitignore-templates helm-git-grep helm-ls-git smeargle treemacs-magit magit magit-section git-commit with-editor transient cargo company counsel-gtags counsel swiper ivy dap-mode lsp-docker lsp-treemacs bui yaml lsp-mode markdown-mode flycheck-rust ggtags racer pos-tip ron-mode rust-mode toml-mode vim-powerline ws-butler writeroom-mode winum which-key volatile-highlights vi-tilde-fringe uuidgen use-package treemacs-projectile treemacs-persp treemacs-icons-dired treemacs-evil toc-org term-cursor symon symbol-overlay string-inflection string-edit-at-point spacemacs-whitespace-cleanup spacemacs-purpose-popwin spaceline space-doc restart-emacs request rainbow-delimiters quickrun popwin pcre2el password-generator paradox overseer org-superstar open-junk-file nameless multi-line macrostep lorem-ipsum link-hint inspector info+ indent-guide hybrid-mode hungry-delete holy-mode hl-todo highlight-parentheses highlight-numbers highlight-indentation hide-comnt help-fns+ helm-xref helm-themes helm-swoop helm-purpose helm-projectile helm-org helm-mode-manager helm-make helm-descbinds google-translate golden-ratio flycheck-package flycheck-elsa flx-ido fancy-battery eyebrowse expand-region evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-textobj-line evil-surround evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state evil-lion evil-indent-plus evil-iedit-state evil-goggles evil-exchange evil-evilified-state evil-escape evil-easymotion evil-collection evil-cleverparens evil-args evil-anzu eval-sexp-fu emr elisp-slime-nav elisp-def editorconfig dumb-jump drag-stuff dotenv-mode dired-quick-sort diminish devdocs define-word column-enforce-mode clean-aindent-mode centered-cursor-mode auto-highlight-symbol auto-compile all-the-icons aggressive-indent ace-link ace-jump-helm-line))
 '(safe-local-variable-values
    '((eval add-hook 'before-save-hook 'time-stamp)
       (eval progn
        (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.terraform\\.[^.]+$")
        (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]metastore_db$"))
       (eval add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.terraform\\.[^.]+$")
       (eval progn
         (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]build$")
         (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]dist$"))
       (lsp-enabled-clients deno-ls)
       (lsp-disabled-clients ts-ls)
       (typescript-backend . tide)
       (typescript-backend . lsp)
       (javascript-backend . tide)
       (javascript-backend . tern)
       (javascript-backend . lsp)))
 '(web-mode-css-indent-offset 2)
 '(web-mode-markup-indent-offset 2))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
)
